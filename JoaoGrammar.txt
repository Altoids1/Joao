Here is the complete syntax of João in extended BNF. As usual in extended BNF, {A} means 0 or more As, and [A] means an optional A. Brace characters are escaped with single-quotes.
	
	program ::= {classdef | funcdef | includefile}
	
	includefile ::== 'include ' LiteralString
	
	classdef ::= directory '{' {varstat ';'} '}'
	
	funcdef ::= directory '(' [parlist] '){' block '}'
	
	directory ::= '/'{Name'/'}Name
	
	parlist ::= Name {','Name} [',']
	
	varstat :: init_var | (var assignop exp)
	
	block ::= {stat}
	
	stat ::=  ';' |
		varstat ';' |
		functioncall ';' |
		return [exp] ';' |
		'break' [PositiveInteger] ';' |
		'while(' exp '){' block '}' |
		'if(' exp '){' block '}' {'elseif(' exp '){' block '}'} ['else(' exp '){' block '}'] |
		'for('for_generic_init | for_each_init'){' block '}' |
		'try{' block '}catch(' Name '){' block ')' |
		'throw' [exp] ';'
	
	for_generic_init ::= '[varstat | exp] ';' [exp] ';' [varstat | exp]
	
	for_each_init ::= Name ',' Name ' in ' exp
	
	init_var ::= ('Value' | 'Object' | 'Number' | 'String' | 'Boolean') Name
	
	var ::= init_var | var_access
	
	var_access ::= scoped_access | var_access property | var_access element
	
	scoped_access ::= './' Name |
		{'../'}'../' Name |
		'/' Name |
		Name
	
	functioncall ::= var_access '(' explist ')' [func_access]
	
	func_access ::= (property | element)['(' explist ')'][func_access]
	
	property ::= {'.' Name }
	
	element ::= {'[' exp ']'}
	
	explist ::= exp {, exp}
	
	exp ::= comparison {('&&' | '||' | '~~') comparison}
	
	comparison ::= bitwise {(‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘!=’) bitwise}
	
	bitwise ::= concat {(‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’) concat}
	
	concat ::= term {'..' term}
	
	term ::= factor {(‘+’ | ‘-’) factor}
	
	factor ::= unary {(‘*’ | ‘/’ | ‘//’| ‘%’) unary}
	
	unary ::= {unop} power
	
	power ::= {lvalue '^'} lvalue
	
	lvalue ::= 'null' | 'false' | 'true' | Numeral | LiteralString |
			tableconstructor | var_access | functioncall | '(' exp ')' | constructor
			
	constructor ::= directory '/New(' [explist] ')' [func_access]
	
	tableconstructor ::= '{' [exp] {',' exp} [',']'}' |
		'{' [Name '=' exp] {',' [Name '=' exp]}[','] '}'
	
	assignop ::= '=' | '+=' | '-=' | '*=' | '/='

	unop ::= ‘-’ | '!' | ‘#’ | ‘~’