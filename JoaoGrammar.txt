Here is the complete syntax of João in extended BNF. As usual in extended BNF, {A} means 0 or more As, and [A] means an optional A. Brace characters are escaped with single-quotes.
	
	program ::= {classdef | funcdef}

	block ::= {stat} [retstat]

	stat ::=  ‘;’ | 
		 varstat ';'| 
		 functioncall ';'| 
		 break';' | 
		 while(exp)'{'block'}' | 
		 if(exp)'{'block'}' {elseif(exp)'{'block'}'} [else'{'block'}']|
		 for([varstat]';'[exp]';'[exp])'{'block'}' |

	retstat ::= return exp ';'

	directory ::= {'/'Name}
	
	classdef ::=  {directory}'/'Name'{'{varstat}'}'
	
	funcdef ::= {directory}'/'Name‘(’ [parlist] ‘){'block'}'

	varstat ::= var assignop exp

	var ::= (('Value' | 'Object' | 'Number' | 'String' | 'Boolean') Name) |'./' Name | '/' Name | prefixexp ‘[’ exp ‘]’ | prefixexp ‘.’ Name

	namelist ::= Name {‘,’ Name}

	explist ::= exp {‘,’ exp}

	exp ::=  null | false | true | Numeral | LiteralString | 
		 prefixexp | tableconstructor | exp binop exp | unop exp 

	prefixexp ::= var | functioncall | ‘(’ exp ‘)’

	functioncall ::=  var args

	args ::=  ‘(’ [explist] ‘)’

	parlist ::= namelist [‘,’ ‘...’] | ‘...’

	tableconstructor ::= ‘{’ [fieldlist] ‘}’

	fieldlist ::= field {‘,’ field} [‘,’]

	field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp
	
	assignop ::= '=' | '+=' | '-=' | '*=' | '/='

	binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’ | 
		 ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘..’ | 
		 ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘!=’ | 
		 '&&' | '||' | '~~'

	unop ::= ‘-’ | '!' | ‘#’ | ‘~’ | '../' | './'