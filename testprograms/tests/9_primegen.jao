/isprime(n) ##  Returns whether something is prime with only as many modulo operations as there are primes below it's sqrt
{
	try  ## Creates the prime array. Could've been in int main(), but this makes it self-contained.
	{
		Number x = /primes[0];
	}
	catch(err)
	{
		##print("Building prime table...");
		/primes = /table/New(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197);
	}
	Number squirt = sqrt(n);
	if(squirt > primes[#primes-1]) ## If $n is too big for the main function to work
	{
		##print("Primes exhausted for " .. n);
		for(Number a = primes[#primes-1]; true; a+=2) ## Then build the array up until it can!
		{
			##print("Calling isprime(" .. a .. ")...");
			isprime(a);
			if(prime[#primes-1] > squirt) { break; }
		}
	}
	
	if(n == 1)
	{
		return false;
	}
	
	for(Number i = 0; i < #primes; i+=1)
	{
		Number prime = primes[i];
		if(prime > squirt)
		{
			if(n > primes[#primes-1])
			{
				primes[#primes] = n;
			}
			return true;
		}
		elseif(n % prime == 0)
		{
			return false;
		}
	}
	throw /error/New("Unexpected flow control reached in isprime()!");
}

/main()
{
	Value n = 1_000_000;
	##print("List of primes:");
	
	for(Number i=3; i < n; i+=1)
	{
		isprime(i);
	}
}
