/error/arithmetic/New()
{
	what = "Arithmetic error detected!";
	code = 7;
}
/assert(stmt)
{
    if(!stmt)
    {
        throw /error/arithmetic/New();
    }
}
/asserteq(a,b)
{
    if(a != b)
    {
        throw /error/New(7, a .. " != " .. b);
    }
}

/main()
{
    ## Ints and order of operations
    asserteq(2 ^ 3 ^ 3, 134217728);

    ## Doubles n stuff
    asserteq(2.0 * 2.0,4.0);
    asserteq(4.5 % 2.0,0.5);
    asserteq(4.5 // 2.0,2);
    asserteq(.2 , 0.2); ## Making sure we have starting-dot support :B

    assert(1.1 | -1.1);

    ## Ints and doubles intermingling
    assert(1.5 == (1 + 0.5)); ## Even floats can't mess this one up!
    assert(1.5 // 1 == 1);
    assert(2 // 1.0 == 2);
    ## Weird boolean casts
    assert((1 + true) == 2);
    assert(false * 2 == 0);
    assert(2 * false == 0);
    assert(false | 1 == 1);
    Value didFail = false;
    try
    {
        Value evading_const_folding = 7;
        assert("string" + evading_const_folding);
    }
    catch(expr)
    {
        didFail = true;
    }
    assert(didFail);
    didFail = false;
    ## Dividing by zero runtimes, at least for now.
    ## We're just making sure here that there isn't a whole coredump crash about it (since it's UB in C++ to do this)
    try {
        Value evading_const_folding_again = 1;
        Value x = evading_const_folding_again / 0; 
    } catch(_) {
        didFail = true;
    }
    assert(didFail);
    didFail = false;
    try {
        Value evading_const_folding_yet_again = 1;
        Value x = evading_const_folding_yet_again / 0;
    } catch(_) {
        didFail = true;
    }
    assert(didFail);
}